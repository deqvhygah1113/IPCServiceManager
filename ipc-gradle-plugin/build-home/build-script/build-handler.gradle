
def taskExecutionListenerImpl = new TaskExecutionListenerImpl();
gradle.ext.buildHandler = taskExecutionListenerImpl;

class TaskExecutionListenerImpl implements TaskExecutionListener {

	def preBuildName = "preBuild"
	def cleanName = "clean"
	def buildName = "assemble"
	
	def tag = "[TaskExecutionListenerImpl]"
	
	TaskExecutionListenerImpl(){
		
	}
	
	void printExt(Task taskParam,def log){
		taskParam.project.gradle.logger.print tag,log
	}

	void afterExecute(Task taskParam, TaskState state) {
		def taskName = taskParam.name
		
		printExt taskParam,"afterExecute taskName = " + taskName
		
		if(taskName.equals(preBuildName)) {
			
			printExt taskParam,"************************" + preBuildName;
			
			def targetTasks = taskParam.project.tasks.findAll{
				task ->
				task.name.contains("Debug") || task.name.contains("Lint")
		    }
		 	//targetTasks.each{
		    	//it.setEnabled false
		  	//}
			
			taskParam.project.delete 'build'
			taskParam.project.delete taskParam.project.gradle.targetConfigs.getTargetForderName()
		} else if(taskName.equals(buildName)) {
		
			printExt taskParam,"projectName = " + taskParam.project.name + " , taskName" + taskName;
			
			if(!taskParam.project.gradle.mainProjectName.equals(taskParam.project.name)){
				printExt taskParam,"projectName = " + taskParam.project.name + " , taskName" + taskName + " ******break"
				return ;
			}
			
			def targetConfigs = taskParam.project.gradle.targetConfigs;
			def manifestVersionCode = Integer.valueOf(taskParam.project.gradle.manifestXml['manifestVersionCode'])
			def manifestVersionName = taskParam.project.gradle.manifestXml['manifestVersionName']
			
			
			def finalPath = 'build/outputs/apk/'
				
			def subfix = '';
				
			if(targetConfigs.isSystemApp()){
				subfix = '_system'
			}
			
			taskParam.project.gradle.versionConfigs.getDeviceModels().each {
				
				
				def deviceModel = it;
				
				def gqtLoginUrl = getLoginUrl(taskParam,"/assets/config.ini")
				def vtLoginUrl = getLoginUrl(taskParam,"/assets-vt/config.ini")
				def apnLoginUrl = getLoginUrl(taskParam,"/assets-apn/config.ini")
				
				def targetType = targetConfigs.getTargetType()	
				def gqtReleaseName = targetConfigs.getTargetName() + "_" + manifestVersionName + "_"+ deviceModel + "_" + targetType + (gqtLoginUrl.equals('') ? '' : "_" + gqtLoginUrl)
				def vtReleaseName = "VT_" + manifestVersionName + "_"+ deviceModel + "_" + targetType + (vtLoginUrl.equals('') ? '' : "_" + vtLoginUrl)
				def apnReleaseName = targetConfigs.getTargetName() + "_" + manifestVersionName + "_"+ deviceModel + "_" + targetType + (apnLoginUrl.equals('') ? '' : "_" + apnLoginUrl)
				
				printExt taskParam,"gqtReleaseName = " + gqtReleaseName;
				printExt taskParam,"vtReleaseName = " + vtReleaseName;
				printExt taskParam,"apnReleaseName = " + apnReleaseName;
				
				copyto(taskParam,finalPath,'release',gqtReleaseName+subfix);
				
				copyto(taskParam,finalPath,'vt',vtReleaseName+subfix);
				
				copyto(taskParam,finalPath,'apn',apnReleaseName+subfix);
				
			}
			
			if(targetConfigs.isSystemApp()){
				makeSystemApk(taskParam);
			}
			
			taskParam.project.copy {
				into('assets')
			    from('assets') {
			   		include 'config-release.ini'
			    }
			    rename('config-release','config');
			}
			
		} 
	}
	
	void makeSystemApk(Task taskParam) {
	
		def subfix = '_system'
	
		def targetConfigs = taskParam.project.gradle.targetConfigs;
		
		def systemSignKeyPath = targetConfigs.getSystemSecuritySignPath();
								
		String apkFinalPath = taskParam.project.gradle.targetConfigs.getTargetPath();
		if(apkFinalPath != null){
			apkFinalPath = apkFinalPath + "/"
		}
		
		printExt taskParam,"[makeSystemApk] apkFinalPath = " + apkFinalPath;
		
		def apkPath = apkFinalPath+taskParam.project.gradle.targetConfigs.getTargetForderName() + "\\"
		
		File dir = new File(apkPath);
		
		File[] files = dir.listFiles();
		
		for(File file : files){
			
			String absPath = file.getAbsolutePath();
			
			String repAbsPath = absPath.replace("_system", "");
			
			String newApkPath = absPath.substring(0,repAbsPath.lastIndexOf(".apk"));
		
			printExt taskParam,"[makeSystemApk] newApk = " + newApkPath;
		
			def systemsigncmd =  'java -jar '+systemSignKeyPath+'signapk.jar '+systemSignKeyPath+'platform.x509.pem  '+systemSignKeyPath+'platform.pk8 '+absPath+' ' + newApkPath + '.apk'
		
			printExt taskParam,"[makeSystemApk] command = " + systemsigncmd;
		
			taskParam.project.gradle.buildCommandRunner.setCommand systemsigncmd
			
			taskParam.project.gradle.buildCommandRunner.execute();
			
			taskParam.project.delete {
				delete absPath
			}
			
		}
			
	}
	
	void beforeExecute(Task taskParam) {
		
		def taskName = taskParam.name;
		
		printExt taskParam,"beforeExecute taskName = " + taskName
		
		if(taskName.equals(cleanName)) {
			printExt taskParam,"clean";
			
			String apkFinalPath = taskParam.project.gradle.targetConfigs.getTargetPath();
			if(apkFinalPath != null){
				apkFinalPath = apkFinalPath + "/"
			}
			
			taskParam.project.delete {
				delete apkFinalPath+taskParam.project.gradle.targetConfigs.getTargetForderName()
			}
			
			taskParam.project.delete {
				delete taskParam.project.gradle.targetConfigs.getTargetForderName()
			}
		} else if(taskName.equals('preBuild')) {
		
			taskParam.project.delete 'assets/config-release.ini'
		
			taskParam.project.copy {
				into('assets')
			    from('assets') {
			   		include 'config.ini'
			    }
			    rename('config','config-release');
			}	
		} else if(taskName.equals('generateVtAssets')) {
			
			taskParam.project.delete 'assets/config.ini'
			
			taskParam.project.copy {
				into('assets')
			    from('assets-vt') {
			   		include 'config.ini'
			    }
			}
						
		} else if(taskName.equals('generateApnAssets')) {
			
			taskParam.project.delete 'assets/config.ini'
			
			taskParam.project.copy {
				into('assets')
			    from('assets-apn') {
			   		include 'config.ini'
			    }
			}
						
		} else if(taskName.equals('generateReleaseAssets')) {
			
			File f = taskParam.project.file 'assets/config-release.ini'
			
			if(f.exists()){
				printExt taskParam,"beforeExecute config-release file exists = " + f.exists()
			}
			
			taskParam.project.delete 'assets/config.ini'
			
			taskParam.project.copy {
				into('assets')
			    from('assets') {
			   		include 'config-release.ini'
			    }
			    rename('config-release','config');
			}			
			
		} else if(taskName.equals('assemble')) {
			
			taskParam.project.delete 'assets/config.ini'
			
			taskParam.project.copy {
				into('assets')
			    from('assets') {
			   		include 'config-release.ini'
			    }
			    rename('config-release','config');
			}
			
			taskParam.project.delete 'assets/config-release.ini'
		}
		
	}
	
	def prepareAssetsConfig(def path){
		
		taskParam.project.delete 'assets/config.ini'
			
		taskParam.project.copy {
			into('assets')
		    from(path) {
		   		include 'config.ini'
		    }
		}
		
	}
	
	def copyto(Task taskParam,def path,def type,def finalName) {

		String apkFinalPath = taskParam.project.gradle.targetConfigs.getTargetPath();
		if(apkFinalPath != null){
			apkFinalPath = apkFinalPath + "/"
		}

		taskParam.project.copy {
			into(apkFinalPath+taskParam.project.gradle.targetConfigs.getTargetForderName())
		    from(path) {
		   		include '*'+type+'.apk'
		    }
		    rename(taskParam.project.name + '-' + type,finalName);
		}
	}


	def getLoginUrl(Task taskParam,def path){
		
		Properties properties = new Properties()
		File propertyFile = taskParam.project.file path;
		
		if(!propertyFile.exists()){
			return '';
		}
		
		properties.load(propertyFile.newDataInputStream())
	
		def loginurl = properties.getProperty('autoconfigurl')
	
		def ip = loginurl.substring("http://".length(), loginurl.lastIndexOf(":"))
		return ip;
	}
	
}